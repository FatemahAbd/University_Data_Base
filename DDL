-- DDL:-

CREATE TABLE Address (
area_name VARCHAR2(30),
city_name VARCHAR2(30),
block_name VARCHAR2(30), 
street_name VARCHAR2(30), 
CONSTRAINT adrs_pk PRIMARY KEY (area_name,street_name,block_name,city_name));

CREATE TABLE  Nationality(
Nationality varchar(20) primary key);

CREATE TABLE employee (
employee_id NUMBER(9) ,
Full_name_ar  VARCHAR2(100) NOT NULL,
Full_name_en  VARCHAR2(100) NOT NULL,
Nationality varchar(20) NOT NULL REFERENCES Nationality,
national_id  NUMBER(9) NOT NULL, --no unique required becuase emp can get employeed more than once
sex CHAR  NOT NULL ,
social_status CHAR NOT NULL, 
Salary NUMBER (6,2) CHECK ( Salary >=0),
birh_place  VARCHAR2(10) NOT NULL ,
religion VARCHAR2(20)  NOT NULL,
health_status  VARCHAR2(40) NOT NULL,
number_of_family_members NUMBER(2) NOT NULL,
phone  NUMBER(12) NOT NULL,
telephone_home  NUMBER(9),
email VARCHAR2(30) NOT NULL,
password  VARCHAR2(30) NOT NULL,
area_name  VARCHAR2(30) NOT NULL,
city_name  VARCHAR2(30) NOT NULL,
block_name  VARCHAR2(30) NOT NULL,
street_name  VARCHAR2(30) NOT NULL,
CONSTRAINT emp_pk Primary key(Employee_id),
CONSTRAINT emp_sex_chk CHECK (sex IN ('M' , 'F')),
CONSTRAINT emp_sotial_status_chk CHECK ( social_status  IN ('S','M','D' ) ),
CONSTRAINT EMP_FK_ADRES foreign key(area_name,city_name,block_name,street_name) references Address(area_name,city_name,block_name,street_name));

CREATE TABLE building (
building_code CHAR (1) PRIMARY KEY,
building_desc VARCHAR2 (100));

CREATE TABLE floor (
floor_number NUMBER (2),
building_code CHAR (1),
floor_desc VARCHAR2 (100),
FOREIGN KEY (building_code) REFERENCES building,
PRIMARY KEY (building_code, floor_number));

CREATE TABLE room (
room_number NUMBER (2),
floor_number NUMBER (2),
building_code CHAR (1),
capacity NUMBER (5) NOT NULL,
FOREIGN KEY (building_code,floor_number) REFERENCES floor,
PRIMARY KEY (building_code ,floor_number,room_number));

CREATE TABLE Department (
Department_id NUMBER (3),
Department_name VARCHAR2(30) NOT NULL UNIQUE,
room_number NUMBER (2),
floor_number NUMBER (2),
building_code CHAR (1),
FOREIGN KEY (building_code,floor_number,room_number) REFERENCES room,
PRIMARY KEY (Department_id));

CREATE TABLE Majors_Department (
Majors_Department_id NUMBER (3),
Majors_Department_name VARCHAR2(30) NOT NULL UNIQUE,
room_number NUMBER (2),
floor_number NUMBER (2),
building_code CHAR (1),
FOREIGN KEY (building_code,floor_number,room_number) REFERENCES room,
PRIMARY KEY (Majors_Department_id));

CREATE TABLE major (
major_id NUMBER (3) PRIMARY KEY,
major_name VARCHAR2(30) NOT NULL UNIQUE,
Majors_Department_id NUMBER (3) REFERENCES Majors_Department);

CREATE TABLE course (
course_id VARCHAR2(10),
course_name VARCHAR2(30) NOT NULL,
credit NUMBER (1) NOT NULL,
description LONG, 
Majors_Department_id NUMBER (3) REFERENCES Majors_Department,
PRIMARY KEY (course_id));

CREATE TABLE teacher (
Teacher_id Number (9) references employee(Employee_id),
Employment_Start_Date Date default sysdate unique,
Employment_End_Date Date,
Majors_Department_id number (3) references Majors_Department,
Salary number (6,2) check (salary >=0),
PRIMARY KEY (teacher_id));

CREATE TABLE Manager (
Manager_id Number (9) references employee(Employee_id),
Employment_Start_Date Date default sysdate unique,
Employment_End_Date Date,
Salary number (6,2) check (salary >=0),
Manager_Grade varchar2(15) NOT NULL,
Majors_Department_id number (3) references Majors_Department,
Department_id number (3) references Department,
check (Majors_Department_id = null or Department_id = null),
PRIMARY KEY (Manager_id));

CREATE TABLE Security (
Security_id Number (9) references employee(Employee_id),
Employment_Start_Date Date default sysdate unique,
Employment_End_Date Date,
Salary number (6,2) check (salary >=0),
Department_id number (3) references Department,
PRIMARY KEY (Security_id));

CREATE TABLE Secretary (
Secretary_id Number (9) references employee(Employee_id),
Employment_Start_Date Date default sysdate unique,
Employment_End_Date Date,
Majors_Department_id number (3) references Majors_Department,
Department_id number (3) references Department,
check (Majors_Department_id = null or Department_id = null),
PRIMARY KEY (Secretary_id));

CREATE TABLE item (
item_id NUMBER (3) PRIMARY KEY,
item_description VARCHAR2(200) NOT NULL);

CREATE TABLE room_items (
item_id NUMBER (3) REFERENCES item,
room_number NUMBER (2),
floor_number NUMBER (2),
building_code CHAR (1),
FOREIGN KEY (building_code,floor_number,room_number) REFERENCES room,
quantity NUMBER (5) NOT NULL,
PRIMARY KEY (item_id , room_number));

CREATE TABLE study_plan (
plan_number Number (3),
major_id NUMBER (3) REFERENCES major,
PRIMARY KEY (plan_number, major_id));

CREATE TABLE study_plan_courses (
plan_number Number (3),
major_id NUMBER (3),
course_id VARCHAR2(10),
year DATE NOT NULL,
semester NUMBER (1) CHECK (semester IN (1,2)),
FOREIGN KEY (course_id) REFERENCES course,
FOREIGN KEY (plan_number, major_id) REFERENCES study_plan,
PRIMARY KEY (plan_number, major_id, course_id));

CREATE TABLE student (
sid NUMBER(9) PRIMARY KEY,
Full_name_ar  VARCHAR2(100) NOT NULL,
Full_name_en  VARCHAR2(100) NOT NULL,
Nationality varchar(20) NOT NULL REFERENCES Nationality,
national_id  Number(9) NOT NULL,
sex  CHAR  NOT NULL CHECK (sex IN ('M' , 'F')) ,
social_status  CHAR NOT NULL CHECK ( social_status  IN ('S','M') ), 
guardian_name  VARCHAR2(30) NOT NULL,
guardian_national_id  Number(9) NOT NULL,
guardian_relation VARCHAR2(10) NOT NULL, 
birh_place  VARCHAR2(10) NOT NULL ,
date_of_birth  DATE NOT NULL,
religion  VARCHAR2(20)  NOT NULL,
health_status  VARCHAR2(40) NOT NULL  ,
mother_name  VARCHAR2(30) NOT NULL,
mother_job  VARCHAR2(20) NOT NULL , 
mother_job_desc  VARCHAR2(100) NOT NULL,
father_job  VARCHAR2(20) NOT NULL , 
father_job_desc  VARCHAR2(100) NOT NULL,
parents_status  VARCHAR2(30) NOT NULL  ,
number_of_family_members  NUMBER(2) NOT NULL,
family_university_students NUMBER(2) NOT NULL, 
social_affairs  VARCHAR2(40) NOT NULL ,
phone  NUMBER(12) ,
telephone_home  NUMBER(8) ,
emergency_phone   NUMBER(12) NOT NULL,
email VARCHAR2(30) ,
password  VARCHAR2(30) NOT NULL,
tawjihi_GPA  number(3,2) NOT NULL,
tawjihi_field CHAR NOT NULL,
area_name  VARCHAR2(30) NOT NULL,
city_name  VARCHAR2(30) NOT NULL,
block_name  VARCHAR2(30) NOT NULL,
balance NUMBER(5) NOT NULL,
street_name  VARCHAR2(30) NOT NULL,
major_name  NUMBER(3) NOT NULL REFERENCES major ,
foreign key (area_name,city_name,block_name,street_name) references address(area_name,city_name,block_name,street_name),
constraint stdnt_twj_fld_chk CHECK (tawjihi_field  IN ('S' , 'L' )));

CREATE TABLE academic_advice (
teacher_id NUMBER (9) references teacher,
sid NUMBER(9) REFERENCES student,
year DATE default sysdate, 
semester NUMBER (1) CHECK (semester IN (1,2)),
PRIMARY KEY (teacher_id, sid, year, semester));

CREATE TABLE section (
section_number NUMBER (3),
course_id VARCHAR2(10) references course,
year DATE default sysdate,
semester NUMBER (1) CHECK (semester IN (1,2)),
teacher_id NUMBER(9) REFERENCES teacher,
PRIMARY KEY (section_number, course_id, year, semester));

CREATE TABLE enroll (
sid NUMBER(9) REFERENCES student,
course_id VARCHAR2(10) ,
section_number NUMBER(3) ,
year DATE default sysdate, 
semester NUMBER(1) ,
grade_mid NUMBER (3) DEFAULT NULL ,
grade_final NUMBER (3) DEFAULT NULL,
FOREIGN KEY (section_number , course_id , year , semester) REFERENCES section ,
PRIMARY KEY (sid , course_id , section_number , year , semester),
CHECK ((grade_final+grade_mid >=40)and (grade_final+grade_mid <=100 )));

CREATE TABLE section_rooms (
section_number NUMBER (3) ,
course_id VARCHAR2 (10) ,
year DATE default sysdate, 
semester NUMBER (1) CHECK (semester IN (1,2)),
room_number NUMBER (2),
floor_number NUMBER (2),
building_code CHAR (1),
FOREIGN KEY (building_code,floor_number,room_number) REFERENCES room,
day DATE NOT Null,
start_time DATE ,
end_time DATE ,
FOREIGN KEY (section_number , course_id , year , semester ) REFERENCES section,
PRIMARY KEY (building_code,floor_number, year , semester, room_number, start_time,day));

--------------------------------------------------------------------------------------------------------------------

CREATE TABLE Address_log (
street_name VARCHAR2(30) NOT NULL,
 block_name VARCHAR2(30) NOT NULL, 
city_name VARCHAR2(30) NOT NULL, 
area_name VARCHAR2(30) NOT NULL, 
action_name char (6) NOT NULL, 
action_date date default sysdate NOT NULL, 
action_user varchar2(30) default user NOT NULL);

create trigger ai_address_trigger after insert on address 
for each row
begin
insert into address_log values (:new.street_name ,:new.block_name ,:new.city_name ,:new.area_name ,'insert' ,default,default ); 
end;
 /

create trigger au_address_trigger after update on address
for each row 
begin 
insert into ADDRESS_LOG values (:old.street_name ,:old.block_name ,:old.city_name ,:old.area_name , 'delete',default,default );
insert into ADDRESS_LOG values (:new.street_name ,:new.block_name ,:new.city_name ,:new.area_name , 'insert',default,default ); 
end;
 /

create trigger ad_address_trigger after delete on address 
for each row 
begin 
insert into ADDRESS_LOG values (:old.street_name ,:old.block_name ,:old.city_name ,:old.area_name ,'delete' ,default ,default );
end;
 /

CREATE TABLE employee_log (
employee_id NUMBER(9) ,
Full_name_ar  VARCHAR2(100) NOT NULL,
Full_name_en  VARCHAR2(100) NOT NULL,
Nationality varchar(20) NOT NULL,
national_id  NUMBER(9) NOT NULL,
sex CHAR  NOT NULL ,
social_status CHAR NOT NULL, 
Salary NUMBER (6,2) CHECK ( Salary >=0),
birh_place  VARCHAR2(10) NOT NULL ,
religion VARCHAR2(20)  NOT NULL,
health_status  VARCHAR2(40) NOT NULL,
number_of_family_members NUMBER(2) NOT NULL,
phone  NUMBER(12) NOT NULL,
telephone_home NUMBER(9),
email VARCHAR2(30) NOT NULL,
password  VARCHAR2(30) NOT NULL,
area_name  VARCHAR2(30) NOT NULL,
city_name  VARCHAR2(30) NOT NULL,
block_name  VARCHAR2(30) NOT NULL,
street_name  VARCHAR2(30) NOT NULL,
action_name char(6) NOT NULL , 
action_date date default sysdate NOT NULL, 
action_user varchar2(30) default user NOT NULL);

create trigger ai_employee_trigger after insert on employee
for each row
begin
insert into employee_log values (:new.employee_id ,:new.Full_name_ar ,:new.Full_name_en ,:new.nationality ,:new.national_id 
,:new.sex ,:new.social_status ,:new.Salary ,:new.birh_place ,:new.religion ,:new.health_status ,:new.number_of_family_members 
,:new.phone ,:new.telephone_home ,:new.email ,:new.password ,:new.area_name ,:new.city_name ,:new.block_name  ,:new.street_name ,'insert' ,default ,default );
end;
 /

create trigger au_employee_trigger after update on employee
for each row 
begin
insert into employee_log values (:old.employee_id ,:old.Full_name_ar ,:old.Full_name_en ,:old.nationality  ,:old.national_id,:new.sex  ,:old.social_status  ,:old.Salary  ,:old.birh_place,:old.religion  ,:old.health_status ,:old.number_of_family_members ,:old.phone ,:old.telephone_home ,:old.email ,:old.password ,:old.area_name ,:old.city_name  ,:old.block_name  ,:old.street_name  ,'delete' ,default ,default );
insert into employee_log values (:new.employee_id ,:new.Full_name_ar ,:new.Full_name_en ,:new.nationality  ,:new.national_id,:new.sex  ,:new.social_status  ,:new.Salary  ,:new.birh_place,:new.religion  ,:new.health_status ,:new.number_of_family_members ,:new.phone ,:new.telephone_home ,:new.email ,:new.password ,:new.area_name ,:new.city_name  ,:new.block_name  ,:new.street_name  ,'insert' ,default ,default );
end;
 /

create trigger ad_employee_trigger after delete on employee
for each row 
begin 
insert into employee_log values (:old.employee_id ,:old.Full_name_ar ,:old.Full_name_en ,:old.nationality  ,:old.national_id,:new.sex  ,:old.social_status  ,:old.Salary  ,:old.birh_place,:old.religion  ,:old.health_status ,:old.number_of_family_members,:old.phone  ,:old.telephone_home ,:old.email ,:old.password ,:old.area_name ,:old.city_name  ,:old.block_name  ,:old.street_name  ,'delete' ,default ,default );
end;
 /
CREATE TABLE building_log (
building_code CHAR (1) ,
building_desc VARCHAR2 (100),
action_name char(6) NOT NULL , 
action_date date default sysdate NOT NULL, 
action_user varchar2(30) default user NOT NULL );

create trigger ai_building_trigger after insert on building
for each row
begin
insert into building_log values (:new.building_code,:new.building_desc ,'insert' ,default,default ); 
end;
 /

create trigger au_building_trigger after update on building
for each row 
begin 
insert into building_log values (:old.building_code,:old.building_desc,'delete' ,default,default );
insert into building_log values (:new.building_code,:new.building_desc,'insert' ,default,default ); 
end;
 /

create trigger ad_building_trigger after delete on building
for each row 
begin 
insert into building_log values (:old.building_code,:old.building_desc,'delete' ,default,default );
end;
 /


CREATE TABLE floor_log (
floor_number NUMBER (2),
building_code CHAR (1),
floor_desc VARCHAR2 (100),
action_name char(6) NOT NULL , 
action_date date default sysdate NOT NULL, 
action_user varchar2(30) default user NOT NULL );


create trigger ai_floor_trigger after insert on floor
for each row
begin
insert into floor_log values (:new.floor_number ,:new.building_code,:new.floor_desc ,'insert' ,default,default ); 
end;
 /

create trigger au_floor_trigger after update on floor
for each row 
begin 
insert into floor_log values (:old.floor_number ,:old.building_code,:old.floor_desc ,'delete' ,default,default );
insert into floor_log values (:new.floor_number ,:new.building_code,:new.floor_desc ,'insert' ,default,default ); 
end;
 /

create trigger ad_floor_trigger after delete on floor
for each row 
begin 
insert into floor_log values (:old.floor_number ,:old.building_code,:old.floor_desc,'delete' , default ,default );
end;
 /
 
CREATE TABLE room_log (
room_number NUMBER (2),
floor_number NUMBER (2),
building_code CHAR (1),
capacity NUMBER (5) NOT NULL,
action_name char(6) NOT NULL , 
action_date date default sysdate NOT NULL, 
action_user varchar2(30) default user NOT NULL);

create trigger ai_room_trigger after insert on room
for each row
begin
insert into room_log values (:new.room_number ,:new.floor_number ,:new.building_code,:new.capacity ,'insert' ,default,default ); 
end;
 /

create trigger au_room_trigger after update on room
for each row 
begin
insert into room_log values (:old.room_number ,:old.floor_number ,:old.building_code,:old.capacity ,'delete' ,default,default ); 
insert into room_log values (:new.room_number ,:new.floor_number ,:new.building_code,:new.capacity ,'insert' ,default,default ); 
end;
 /

create trigger ad_room_trigger after delete on room
for each row 
begin 
insert into room_log values (:old.room_number ,:old.floor_number ,:old.building_code,:old.capacity ,'delete' ,default,default ); 
end;
 /
 
CREATE TABLE Department_log (
Department_id NUMBER (3),
Department_name VARCHAR2(30) NOT NULL UNIQUE,
room_number NUMBER (2),
floor_number NUMBER (2),
building_code CHAR (1),
action_name char(6) NOT NULL , 
action_date date default sysdate NOT NULL, 
action_user varchar2(30) default user NOT NULL);

create trigger ai_Department_trigger after insert on Department
for each row
begin
insert into Department_log values (:new.Department_id ,:new.Department_name ,:new.room_number,:new.floor_number ,:new.building_code ,'insert',default,default); 
end;
 /

create trigger au_Department_trigger after update on Department
for each row 
begin
insert into Department_log values (:old.Department_id ,:old.Department_name ,:old.room_number,:old.floor_number ,:old.building_code ,'delete',default,default); 
insert into Department_log values (:new.Department_id ,:new.Department_name ,:new.room_number,:new.floor_number ,:new.building_code ,'insert',default,default); 
end;
 /

create trigger ad_Department_trigger after delete on Department
for each row 
begin 
insert into Department_log values (:old.Department_id ,:old.Department_name ,:old.room_number,:old.floor_number ,:old.building_code ,'delete',default,default); 
end;
 /
 
CREATE TABLE Majors_Department_log (
Majors_Department_id NUMBER (3),
Majors_Department_name VARCHAR2(30) NOT NULL ,
room_number NUMBER (2),
floor_number NUMBER (2),
building_code CHAR (1),
action_name char(6) NOT NULL , 
action_date date default sysdate NOT NULL, 
action_user varchar2(30) default user NOT NULL);

create trigger ai_Majors_Department_trigger after insert on Majors_Department
for each row
begin
insert into Majors_Department_log values (:new.Majors_Department_id ,:new.Majors_Department_name ,:new.room_number,:new.floor_number ,:new.building_code ,'insert',default,default); 
end;
 /

create trigger au_Majors_Department_trigger after update on Majors_Department
for each row 
begin
insert into Majors_Department_log values (:old.Majors_Department_id ,:old.Majors_Department_name ,:old.room_number,:old.floor_number ,:old.building_code ,'delete',default,default); 
insert into Majors_Department_log values (:new.Majors_Department_id ,:new.Majors_Department_name ,:new.room_number,:new.floor_number ,:new.building_code ,'insert',default,default); 
end;
 /

create trigger ad_Majors_Department_trigger after delete on Majors_Department
for each row 
begin 
insert into Majors_Department_log values (:old.Majors_Department_id ,:old.Majors_Department_name ,:old.room_number,:old.floor_number ,:old.building_code ,'delete',default,default); 
end;
 /
 
CREATE TABLE major_log (
major_id NUMBER (3) ,
major_name VARCHAR2(30) NOT NULL ,
Majors_Department_id NUMBER (3) ,
action_name char(6) NOT NULL , 
action_date date default sysdate NOT NULL, 
action_user varchar2(30) default user NOT NULL);

create trigger ai_major_trigger after insert on major
for each row
begin
insert into major_log values (:new.major_id ,:new.major_name ,:new.Majors_Department_id ,'insert',default,default); 
end;
 /

create trigger au_major_trigger after update on major
for each row 
begin
insert into major_log values (:old.major_id ,:old.major_name ,:old.Majors_Department_id ,'delete',default,default); 
insert into major_log values (:new.major_id ,:new.major_name ,:new.Majors_Department_id ,'insert',default,default); 
end;
 /

create trigger ad_major_trigger after delete on major
for each row 
begin 
insert into major_log values (:old.major_id ,:old.major_name ,:old.Majors_Department_id ,'delete',default,default); 
end;
 /
 CREATE TABLE course_log (
course_id VARCHAR2(10),
course_name VARCHAR2(30) NOT NULL,
credit NUMBER (1) NOT NULL,
Majors_Department_id NUMBER (3),
action_name char(6) NOT NULL , 
action_date date default sysdate NOT NULL, 
action_user varchar2(30) default user NOT NULL);

create trigger ai_course_trigger after insert on course
for each row
begin
insert into course_log values (:new.course_id ,:new.course_name ,:new.credit ,:new.Majors_Department_id ,'insert',default,default); 
end;
 /

create trigger au_course_trigger after update on course
for each row 
begin
insert into course_log values (:old.course_id ,:old.course_name ,:old.credit ,:old.Majors_Department_id,'Delete',default,default); 
insert into course_log values (:new.course_id ,:new.course_name ,:new.credit ,:new.Majors_Department_id,'insert',default,default); 
end;
 /

create trigger ad_course_trigger after delete on course
for each row 
begin 
insert into course_log values (:old.course_id ,:old.course_name ,:old.credit ,:old.Majors_Department_id,'Delete',default,default); 
end;
 /

CREATE TABLE teacher_log (
Teacher_id Number (9),
Employment_Start_Date Date,
Employment_End_Date Date,
Majors_Department_id number (3),
Salary number (6,2) check (salary >=0),
action_name char(6) NOT NULL , 
action_date date default sysdate NOT NULL, 
action_user varchar2(30) default user NOT NULL);

create trigger ai_teacher_trigger after insert on teacher
for each row
begin
insert into teacher_log values (:new.Teacher_id ,:new.Employment_Start_Date ,:new.Employment_End_Date,:new.Majors_Department_id,:new.Salary ,'insert' ,default,default ); 
end;
 /

create trigger au_course_trigger after update on course
for each row 
begin
insert into teacher_log values (:old.Teacher_id ,:old.Employment_Start_Date ,:old.Employment_End_Date,:old.Majors_Department_id,:old.Salary ,'delete' ,default,default ); 
insert into teacher_log values (:new.Teacher_id ,:new.Employment_Start_Date ,:new.Employment_End_Date,:new.Majors_Department_id,:new.Salary ,'insert' ,default,default ); 
end;
 /

create trigger ad_course_trigger after delete on course
for each row 
begin 
insert into teacher_log values (:old.Teacher_id ,:old.Employment_Start_Date ,:old.Employment_End_Date,:old.Majors_Department_id,:old.Salary ,'delete' ,default,default ); 
end;
 /
 --------------------------------------------------------------------------------------------------------------------


select * from tab;
select trigger_name from user_triggers;

insert into Address values('GazaStrip','Gaza','Naser','Elgesser');
insert into Nationality values('Nationality');
insert into Employee values(120100001,'Arabic Full Name','English Full Name','Nationality',123456789,'M','S',500,'Gaza','Islam','Good',20,970555555555,082876543,'Ahmed@mail.com','ABCD', 'GazaStrip','Gaza','Naser','Elgesser');
insert into Building values('A','Building Desc');
insert into floor values(1,'A','Floor Description');
insert into Building values('B','Building Desc');
insert into floor values(2,'B','Floor Description');
insert into room values(02,2,'B',50);
insert into room values(01,1,'A',100);
insert into department values(100,'Enge',02,2,'B');
insert into Majors_Department values(100,'Admission',01,1,'A');
insert into major values(1,'Information Security',100);
insert into course values('COMP 2113','Data Base 1',1,'DESCRIPTION',100);
insert into teacher values(120100001,TO_DATE('17/12/2015', 'DD/MM/YYYY'),TO_DATE('22/April/2011 8:30:00AM','DD/MON/YY HH:MI:SSAM'),100,499.99);

